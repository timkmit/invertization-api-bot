
import { Scene, SceneEnter, SceneLeave, Hears, Ctx, Action } from 'nestjs-telegraf';
import { Context2 } from '../context.interface';
import { PrismaService } from 'src/prisma.service';
import { CategoryService } from 'src/category/category.service';
import { Markup } from 'telegraf';

@Scene('info_product_scene')
export class InfoProductScene {
  constructor(
    private readonly prisma: PrismaService,
    private readonly categoryService: CategoryService,
  ) {}

  @SceneEnter()
  async onSceneEnter(ctx: Context2): Promise<void> {
    await ctx.reply('üü¢–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'show_products' }],
          [{ text: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'show_categories' }],
          [{ text: '–ù–∞–π—Ç–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É', callback_data: 'search_by_article' }],
          [{ text: '–ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', callback_data: 'search_by_name' }],
          [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
        ],
      },
    });
  }

  @SceneLeave()
  async onSceneLeave(@Ctx() ctx: Context2): Promise<void> {
    await ctx.scene.enter('greeting_scene');
  }

  @Hears(['üîé–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä', '‚úçÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'])
  async onInvalidCommand(@Ctx() ctx: Context2): Promise<void> {
    await ctx.reply('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—É—Ç, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
    await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è" –∏–ª–∏ "–ù–∞–∑–∞–¥".')
  }

  @Hears(['leave', 'Leave', '–í—ã–π—Ç–∏', '–≤—ã–π—Ç–∏', '–í–µ—Ä–Ω—É—Ç—å—Å—è', '–≤–µ—Ä–Ω—É—Ç—å—Å—è', '–ù–∞–∑–∞–¥', '–Ω–∞–∑–∞–¥'])
  async onLeaveCommand(ctx: Context2): Promise<void> {
    await ctx.scene.enter('greeting_scene');
  }

  @Action('show_products')
  async showProducts(ctx: Context2): Promise<void> {
    ctx.session.productPage = 0;
    await this.displayProducts(ctx);
  }

  @Action('show_next_products')
  async showNextProducts(ctx: Context2): Promise<void> {
    ctx.session.productPage = (ctx.session.productPage || 0) + 1; 
    await this.displayProducts(ctx);
  }

  async displayProducts(ctx: Context2): Promise<void> {
    const page = ctx.session.productPage || 0;
    const pageSize = 10;

    const products = await this.prisma.product.findMany({
      skip: page * pageSize,
      take: pageSize,
    });

    if (products.length === 0) {
      await ctx.reply('–¢–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.');
      ctx.session.productPage = 0;
      return;
    }

    const productsDetails = products.map((product, key) => {
      return `${key + 1 + page * pageSize}) ${product.name}\nüü¢–¶–≤–µ—Ç: ${product.color}\nüü¢–¶–µ–Ω–∞: ${product.price}\nüü¢–ê—Ä—Ç–∏–∫—É–ª: ${product.article_number}\nüü¢–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.count}\nüü¢–ü—Ä–æ–¥–∞–µ—Ç—Å—è: ${product.visibility ? '–¥–∞' : '–Ω–µ—Ç'}\n`;
    });

    await ctx.reply(`${productsDetails.join('\n')}`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–°–ª–µ–¥—É—é—â–∏–µ', callback_data: 'show_next_products' }],
          [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ],
      },
    });
  }

  @Action('show_categories')
  async showCategories(ctx: Context2): Promise<void> {
    const categories = await this.categoryService.getAll();

    await ctx.reply(
      `–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤:\n\n${categories.map(({ name }, i) => `${i + 1}) ${name}`).join('\n')}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ],
        },
      }
    );
  }

  @Action('search_by_article')
  async searchByArticle(ctx: Context2): Promise<void> {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:');
    ctx.session.type = 'by_article';
  }

  @Action('search_by_name')
  async searchByName(ctx: Context2): Promise<void> {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:');
    ctx.session.type = 'by_name';
  }

  @Hears(/.*/)
  async onMessage(@Ctx() ctx: Context2): Promise<void> {
    const message = ctx.message;
    if (!('text' in message)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
      return;
    }
    const text = message.text;
    if (ctx.session.type === 'by_article') {
      await this.findByArticle(ctx, text);
    } else if (ctx.session.type === 'by_name') {
      await this.findByName(ctx, text);
    } else {
      await ctx.reply('–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
    }
  }

  async findByArticle(ctx: Context2, article: string): Promise<void> {
    const product = await this.prisma.product.findFirst({
      where: { article_number: article },
    });

    if (!product) {
      await ctx.reply('–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!',
      Markup.inlineKeyboard([
        Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')
      ])
      );
      return;
    }

    const category = await this.prisma.category.findUnique({
      where: { id: product.category_id },
    });

    const categoryName = category ? category.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    await ctx.reply(
      `${product.name}\n` +
      `üü¢–¶–≤–µ—Ç: ${product.color}\n` +
      `üü¢–¶–µ–Ω–∞: ${product.price}\n` +
      `üü¢–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.count}\n` +
      `üü¢–ü—Ä–æ–¥–∞–µ—Ç—Å—è: ${product.visibility ? '–¥–∞' : '–Ω–µ—Ç'}\n` +
      `üü¢–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}\n` +
      `üü¢–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: ${product.year}\n` +
      `üü¢–ê—Ä—Ç–∏–∫—É–ª: ${product.article_number}\n`,
      Markup.inlineKeyboard([
        Markup.button.callback('–ù–∞–π—Ç–∏ –µ—â–µ —Ç–æ–≤–∞—Ä', 'add_more'),
        Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')
      ])
    );
  }

  async findByName(ctx: Context2, name: string): Promise<void> {
    const products = await this.prisma.product.findMany({
      where: {
        name: {
          contains: name,
          mode: 'insensitive',
        },
      },
    });

    if (products.length === 0) {
      await ctx.reply('–¢–æ–≤–∞—Ä—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑!');
      return;
    }

    const productsDetails = products.map((product, key) => {
      return `${key + 1}) ${product.name}\nüü¢–¶–≤–µ—Ç: ${product.color}\nüü¢–¶–µ–Ω–∞: ${product.price}\nüü¢–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.count}\nüü¢–ü—Ä–æ–¥–∞–µ—Ç—Å—è: ${product.visibility ? '–¥–∞' : '–Ω–µ—Ç'}\n`;
    });

    await ctx.reply(`${productsDetails.join('\n')}`,       
    Markup.inlineKeyboard([
      Markup.button.callback('–ù–∞–π—Ç–∏ –µ—â–µ —Ç–æ–≤–∞—Ä', 'add_more'),
      Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')
    ]));
  }

  @Action('add_more')
  async onAddMore(@Ctx() ctx: Context2): Promise<void> {
    await ctx.scene.reenter();
  }

  @Action('back_to_menu')
  async onEditSceneCommand(ctx : Context2): Promise<void> {
    ctx.session.productPage = 0;
    await ctx.scene.enter('greeting_scene');
  }

  @Action('remove_product')
  async removeGood(ctx: Context2): Promise<void> {
    await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞');
    ctx.session.type = 'remove';
  }
}