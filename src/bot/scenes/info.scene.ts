import { Scene, SceneEnter, SceneLeave, Hears, Ctx, Action } from 'nestjs-telegraf';
import { Context2 } from '../context.interface';
import { PrismaService } from 'src/prisma.service';
import { CategoryService } from 'src/category/category.service';

@Scene('info_product_scene')
export class InfoProductScene {
  constructor(
    private readonly prisma: PrismaService,
    private readonly categoryService: CategoryService,
  ) {}
  
  @SceneEnter()
  async onSceneEnter(ctx: Context2): Promise<void> {
    console.log('Enter to info_product_scene');
    await ctx.reply('üü¢–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'show_products' }],
          [{ text: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'show_categories' }],
          [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'show_outscene' }],
        ],
      },
    });
  }

  @SceneLeave()
  async onSceneLeave(@Ctx() ctx: Context2): Promise<void> {
    console.log('Leave from scene info');
    await ctx.scene.leave();
  }

  @Hears(['üîé–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä', '‚úçÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'])
  async onInvalidCommand(@Ctx() ctx: Context2): Promise<void> {
    await ctx.reply('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—É—Ç, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
    await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è" –∏–ª–∏ "–ù–∞–∑–∞–¥".')
  }

  @Hears(['leave', 'Leave', '–í—ã–π—Ç–∏', '–≤—ã–π—Ç–∏', '–í–µ—Ä–Ω—É—Ç—å—Å—è', '–≤–µ—Ä–Ω—É—Ç—å—Å—è', '–ù–∞–∑–∞–¥', '–Ω–∞–∑–∞–¥'])
  async onLeaveCommand(ctx: Context2): Promise<void> {
    await ctx.scene.enter('greeting_scene');
  }

  @Action('show_products')
  async showProducts(ctx: Context2): Promise<void> {
    const products = await this.prisma.product.findMany();
    console.log(products);

    const productsDetails = products.map((product, key) => {
      return `${key}) ${product.name}\n–¶–≤–µ—Ç: ${product.color}\n–¶–µ–Ω–∞: ${product.price}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.count}\n–ü—Ä–æ–¥–∞–µ—Ç—Å—è: ${product.visibility ? '–¥–∞' : '–Ω–µ—Ç'}\n`;
    });

    await ctx.reply(`${productsDetails.join('\n')}`);
  }

  @Action('show_categories')
  async showCategories(ctx: Context2): Promise<void> {
    const categories = await this.categoryService.getAll();

    await ctx.reply(
      `–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤:\n\n${categories.map(({ name }, i) => `${i + 1}) ${name}`).join('\n')}`,
    );
  }

  @Action('show_outscene')
  async onEditSceneCommand(ctx : Context2): Promise<void> {
    ctx.scene.enter('greeting_scene')
  }

  @Action('remove_product')
  async removeGood(ctx: Context2): Promise<void> {
    await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞');
    ctx.session.type = 'remove';
  }
}





// @Scene('info_product_scene')
// export class InfoProductScene {
//   constructor(
//     private readonly prisma: PrismaService,
//     private readonly categoryService: CategoryService,
//   ) {}
  
//   @SceneEnter()
//   onSceneEnter(): string {
//     console.log('Enter to info_product_scene');
//     return 'Welcome –±—Ä–∞—Ç–∏—à–∫–∞ info_product_scene';
//   }

//   @Hears('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤')
//   async getAll(ctx: Context) {
//     const products = await this.prisma.product.findMany();
//     console.log(products);

//     const productsDetails = products.map((product, key) => {
//       return `${key}) ${product.name}\n–¶–≤–µ—Ç: ${product.color}\n–¶–µ–Ω–∞: ${product.price}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.count}\n–ü—Ä–æ–¥–∞–µ—Ç—Å—è: ${product.visibility ? '–¥–∞' : '–Ω–µ—Ç'}\n`;
//     });

//     await ctx.reply(`${productsDetails.join('\n')}`);
//   }

//   @Hears('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤')
//   async getAllCategory(ctx: Context) {
//     const categories = await this.categoryService.getAll();

//     await ctx.reply(
//       `–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤:\n\n${categories.map(({ name }, i) => `${i + 1}) ${name}`).join('\n')}`,
//     );
//   }

//   @Hears('–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
//   async onEditSceneCommand(ctx : Context2): Promise<void>{

//     if(isAllowedToEnterScene('webapp_scene', ctx.message.chat.id.toString())){
//       await ctx.reply('–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ü–µ–Ω—É edit_product_scenee');
//       await ctx.scene.enter('edit_product_scene')
//     }else ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —ç—Ç—É —Å—Ü–µ–Ω—É')

//   }

//   @Hears('–£–¥–∞–ª–∏—Ç—å')
//   async removeGood(ctx: Context) {
//     await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞');
//     ctx.session.type = 'remove';
//   }

//   @SceneLeave()
//   async onSceneLeave(@Ctx() ctx: Context2): Promise<void> {
//     console.log('Leave from scene');
//     await ctx.scene.enter('greeting_scene');
//   }

//   @Hears('leave')
//   async onLeaveCommand(ctx: Context2): Promise<void> {
//     await ctx.scene.leave();
//   }
// }